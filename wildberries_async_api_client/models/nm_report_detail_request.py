# coding: utf-8

"""
    Wildberries API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from wildberries_async_api_client.models.nm_report_detail_request_order_by import NmReportDetailRequestOrderBy
from wildberries_async_api_client.models.nm_report_detail_request_period import NmReportDetailRequestPeriod
from typing import Optional, Set
from typing_extensions import Self

class NmReportDetailRequest(BaseModel):
    """
    NmReportDetailRequest
    """ # noqa: E501
    brand_names: Optional[List[StrictStr]] = Field(default=None, description="Название бренда", alias="brandNames")
    object_ids: Optional[List[StrictInt]] = Field(default=None, description="Идентификатор предмета", alias="objectIDs")
    tag_ids: Optional[List[StrictInt]] = Field(default=None, description="Идентификатор тега", alias="tagIDs")
    nm_ids: Optional[List[StrictInt]] = Field(default=None, description="Артикул WB", alias="nmIDs")
    timezone: Optional[StrictStr] = Field(default=None, description="Временная зона.<br> Если не указано, то по умолчанию используется Europe/Moscow. ")
    period: NmReportDetailRequestPeriod
    order_by: Optional[NmReportDetailRequestOrderBy] = Field(default=None, alias="orderBy")
    page: StrictInt = Field(description="Страница")
    __properties: ClassVar[List[str]] = ["brandNames", "objectIDs", "tagIDs", "nmIDs", "timezone", "period", "orderBy", "page"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NmReportDetailRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of period
        if self.period:
            _dict['period'] = self.period.to_dict()
        # override the default output from pydantic by calling `to_dict()` of order_by
        if self.order_by:
            _dict['orderBy'] = self.order_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NmReportDetailRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "brandNames": obj.get("brandNames"),
            "objectIDs": obj.get("objectIDs"),
            "tagIDs": obj.get("tagIDs"),
            "nmIDs": obj.get("nmIDs"),
            "timezone": obj.get("timezone"),
            "period": NmReportDetailRequestPeriod.from_dict(obj["period"]) if obj.get("period") is not None else None,
            "orderBy": NmReportDetailRequestOrderBy.from_dict(obj["orderBy"]) if obj.get("orderBy") is not None else None,
            "page": obj.get("page")
        })
        return _obj


