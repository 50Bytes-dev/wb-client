# coding: utf-8

"""
    Wildberries API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NmReportDetailRequestOrderBy(BaseModel):
    """
    Параметры сортировки. Если не указано, то по умолчанию используется значение \"openCard\" и сортировка по убыванию. <dl> <dt>Все виды сортировки <code>field</code>:</dt> <dd><code>openCard </code> — по открытию карточки (переход на страницу товара)</dd> <dd><code>addToCart </code> — по добавлениям в корзину</dd> <dd><code>orders </code> — по кол-ву заказов</dd> <dd><code>avgRubPrice </code> — по средней цене в рублях</dd> <dd><code>ordersSumRub </code> — по сумме заказов в рублях</dd> <dd><code>stockMpQty </code> — по кол-ву остатков маркетплейса шт.</dd> <dd><code>stockWbQty </code> — по кол-ву остатков на складе шт.</dd> <dd><code>cancelSumRub </code> — сумме возвратов в рублях</dd> <dd><code>cancelCount </code> — по кол-ву возвратов</dd> <dd><code>buyoutCount </code> — по кол-ву выкупов</dd> <dd><code>buyoutSumRub </code> — по сумме выкупов</dd> </dl> 
    """ # noqa: E501
    var_field: Optional[StrictStr] = Field(default=None, description="Вид сортировки", alias="field")
    mode: Optional[StrictStr] = Field(default=None, description="`asc` — по возрастанию, `desc` — по убыванию                 ")
    __properties: ClassVar[List[str]] = ["field", "mode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NmReportDetailRequestOrderBy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NmReportDetailRequestOrderBy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "field": obj.get("field"),
            "mode": obj.get("mode")
        })
        return _obj


