# coding: utf-8

"""
    Wildberries API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from wildberries_async_api_client.models.response_info_advert_params_inner_intervals_inner import ResponseInfoAdvertParamsInnerIntervalsInner
from wildberries_async_api_client.models.response_info_advert_params_inner_nms_inner import ResponseInfoAdvertParamsInnerNmsInner
from typing import Optional, Set
from typing_extensions import Self

class ResponseInfoAdvertParamsInner(BaseModel):
    """
    ResponseInfoAdvertParamsInner
    """ # noqa: E501
    subject_name: Optional[StrictStr] = Field(default=None, description="Название предметной группы (для кампаний в поиске и рекомендациях)", alias="subjectName")
    active: Optional[StrictBool] = Field(default=None, description="Флаг активности предметной группы, <code>true</code> - активна, <code>false</code> - неактивна")
    intervals: Optional[List[ResponseInfoAdvertParamsInnerIntervalsInner]] = Field(default=None, description="Интервалы часов показа кампании")
    price: Optional[StrictInt] = Field(default=None, description="Текущая ставка")
    menu_id: Optional[StrictInt] = Field(default=None, description="Идентификатор меню, где размещается кампания (для кампаний в каталоге)", alias="menuId")
    subject_id: Optional[StrictInt] = Field(default=None, description="Идентификатор предметной группы, для которой создана кампания (для кампаний в поиске и рекомендациях)", alias="subjectId")
    set_id: Optional[StrictInt] = Field(default=None, description="Идентификатор сочетания предмета и пола (для кампаний в карточке товара)", alias="setId")
    set_name: Optional[StrictStr] = Field(default=None, description="Сочетание предмета и пола (для кампаний в карточке товара)", alias="setName")
    menu_name: Optional[StrictStr] = Field(default=None, description="Название меню, где размещается кампания (для кампаний в каталоге)", alias="menuName")
    nms: Optional[List[ResponseInfoAdvertParamsInnerNmsInner]] = Field(default=None, description="Массив номенклатур кампании")
    __properties: ClassVar[List[str]] = ["subjectName", "active", "intervals", "price", "menuId", "subjectId", "setId", "setName", "menuName", "nms"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResponseInfoAdvertParamsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in intervals (list)
        _items = []
        if self.intervals:
            for _item in self.intervals:
                if _item:
                    _items.append(_item.to_dict())
            _dict['intervals'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in nms (list)
        _items = []
        if self.nms:
            for _item in self.nms:
                if _item:
                    _items.append(_item.to_dict())
            _dict['nms'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResponseInfoAdvertParamsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "subjectName": obj.get("subjectName"),
            "active": obj.get("active"),
            "intervals": [ResponseInfoAdvertParamsInnerIntervalsInner.from_dict(_item) for _item in obj["intervals"]] if obj.get("intervals") is not None else None,
            "price": obj.get("price"),
            "menuId": obj.get("menuId"),
            "subjectId": obj.get("subjectId"),
            "setId": obj.get("setId"),
            "setName": obj.get("setName"),
            "menuName": obj.get("menuName"),
            "nms": [ResponseInfoAdvertParamsInnerNmsInner.from_dict(_item) for _item in obj["nms"]] if obj.get("nms") is not None else None
        })
        return _obj


