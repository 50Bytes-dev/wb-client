# coding: utf-8

"""
    Wildberries API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class DetailReportItem(BaseModel):
    """
    DetailReportItem
    """ # noqa: E501
    realizationreport_id: Optional[StrictInt] = Field(default=None, description="Номер отчёта")
    date_from: Optional[datetime] = Field(default=None, description="Дата начала отчётного периода")
    date_to: Optional[datetime] = Field(default=None, description="Дата конца отчётного периода")
    create_dt: Optional[datetime] = Field(default=None, description="Дата формирования отчёта")
    currency_name: Optional[StrictStr] = Field(default=None, description="Валюта отчёта")
    suppliercontract_code: Optional[Dict[str, Any]] = Field(default=None, description="Договор")
    rrd_id: Optional[StrictInt] = Field(default=None, description="Номер строки")
    gi_id: Optional[StrictInt] = Field(default=None, description="Номер поставки")
    subject_name: Optional[StrictStr] = Field(default=None, description="Предмет")
    nm_id: Optional[StrictInt] = Field(default=None, description="Артикул WB")
    brand_name: Optional[StrictStr] = Field(default=None, description="Бренд")
    sa_name: Optional[StrictStr] = Field(default=None, description="Артикул продавца")
    ts_name: Optional[StrictStr] = Field(default=None, description="Размер")
    barcode: Optional[StrictStr] = Field(default=None, description="Баркод")
    doc_type_name: Optional[StrictStr] = Field(default=None, description="Тип документа")
    quantity: Optional[StrictInt] = Field(default=None, description="Количество")
    retail_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Цена розничная")
    retail_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Сумма продаж (возвратов)")
    sale_percent: Optional[StrictInt] = Field(default=None, description="Согласованная скидка")
    commission_percent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Процент комиссии")
    office_name: Optional[StrictStr] = Field(default=None, description="Склад")
    supplier_oper_name: Optional[StrictStr] = Field(default=None, description="Обоснование для оплаты")
    order_dt: Optional[datetime] = Field(default=None, description="Дата заказа. <br>Присылается с явным указанием часового пояса")
    sale_dt: Optional[datetime] = Field(default=None, description="Дата продажи. <br>Присылается с явным указанием часового пояса")
    rr_dt: Optional[datetime] = Field(default=None, description="Дата операции. <br> Присылается с явным указанием часового пояса")
    shk_id: Optional[StrictInt] = Field(default=None, description="Штрих-код")
    retail_price_withdisc_rub: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Цена розничная с учетом согласованной скидки")
    delivery_amount: Optional[StrictInt] = Field(default=None, description="Количество доставок")
    return_amount: Optional[StrictInt] = Field(default=None, description="Количество возвратов")
    delivery_rub: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Стоимость логистики")
    gi_box_type_name: Optional[StrictStr] = Field(default=None, description="Тип коробов")
    product_discount_for_report: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Согласованный продуктовый дисконт")
    supplier_promo: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Промокод")
    rid: Optional[StrictInt] = Field(default=None, description="Уникальный идентификатор заказа")
    ppvz_spp_prc: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Скидка постоянного покупателя")
    ppvz_kvw_prc_base: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Размер кВВ без НДС, % базовый")
    ppvz_kvw_prc: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Итоговый кВВ без НДС, %")
    sup_rating_prc_up: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Размер снижения кВВ из-за рейтинга")
    is_kgvp_v2: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Размер снижения кВВ из-за акции")
    ppvz_sales_commission: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Вознаграждение с продаж до вычета услуг поверенного, без НДС")
    ppvz_for_pay: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="К перечислению продавцу за реализованный товар")
    ppvz_reward: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Возмещение за выдачу и возврат товаров на ПВЗ")
    acquiring_fee: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Возмещение издержек по эквайрингу. <br> Издержки WB за услуги эквайринга: вычитаются из вознаграждения WB и не влияют на доход продавца. ")
    acquiring_bank: Optional[StrictStr] = Field(default=None, description="Наименование банка-эквайера")
    ppvz_vw: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Вознаграждение WB без НДС")
    ppvz_vw_nds: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="НДС с вознаграждения WB")
    ppvz_office_id: Optional[StrictInt] = Field(default=None, description="Номер офиса")
    ppvz_office_name: Optional[StrictStr] = Field(default=None, description="Наименование офиса доставки")
    ppvz_supplier_id: Optional[StrictInt] = Field(default=None, description="Номер партнера")
    ppvz_supplier_name: Optional[StrictStr] = Field(default=None, description="Партнер")
    ppvz_inn: Optional[StrictStr] = Field(default=None, description="ИНН партнера")
    declaration_number: Optional[StrictStr] = Field(default=None, description="Номер таможенной декларации")
    bonus_type_name: Optional[StrictStr] = Field(default=None, description="Обоснование штрафов и доплат. <br>Поле будет в ответе при наличии значения")
    sticker_id: Optional[StrictStr] = Field(default=None, description="Цифровое значение стикера, который клеится на товар в процессе сборки заказа по схеме \"Маркетплейс\"")
    site_country: Optional[StrictStr] = Field(default=None, description="Страна продажи")
    penalty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Штрафы")
    additional_payment: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Доплаты")
    rebill_logistic_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Возмещение издержек по перевозке. Поле будет в ответе при наличии значения")
    rebill_logistic_org: Optional[StrictStr] = Field(default=None, description="Организатор перевозки. Поле будет в ответе при наличии значения")
    kiz: Optional[StrictStr] = Field(default=None, description="Код маркировки. <br> Поле будет в ответе при наличии значения")
    storage_fee: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Стоимость хранения")
    deduction: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Прочие удержания/выплаты")
    acceptance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Стоимость платной приёмки")
    srid: Optional[StrictStr] = Field(default=None, description="Уникальный идентификатор заказа.  Примечание для использующих API Marketplace: `srid` равен `rid` в ответах методов сборочных заданий. ")
    report_type: Optional[StrictInt] = Field(default=None, description="Тип отчёта:    * `1` — стандартный   * `2` — для уведомления о выкупе ")
    __properties: ClassVar[List[str]] = ["realizationreport_id", "date_from", "date_to", "create_dt", "currency_name", "suppliercontract_code", "rrd_id", "gi_id", "subject_name", "nm_id", "brand_name", "sa_name", "ts_name", "barcode", "doc_type_name", "quantity", "retail_price", "retail_amount", "sale_percent", "commission_percent", "office_name", "supplier_oper_name", "order_dt", "sale_dt", "rr_dt", "shk_id", "retail_price_withdisc_rub", "delivery_amount", "return_amount", "delivery_rub", "gi_box_type_name", "product_discount_for_report", "supplier_promo", "rid", "ppvz_spp_prc", "ppvz_kvw_prc_base", "ppvz_kvw_prc", "sup_rating_prc_up", "is_kgvp_v2", "ppvz_sales_commission", "ppvz_for_pay", "ppvz_reward", "acquiring_fee", "acquiring_bank", "ppvz_vw", "ppvz_vw_nds", "ppvz_office_id", "ppvz_office_name", "ppvz_supplier_id", "ppvz_supplier_name", "ppvz_inn", "declaration_number", "bonus_type_name", "sticker_id", "site_country", "penalty", "additional_payment", "rebill_logistic_cost", "rebill_logistic_org", "kiz", "storage_fee", "deduction", "acceptance", "srid", "report_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DetailReportItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DetailReportItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "realizationreport_id": obj.get("realizationreport_id"),
            "date_from": obj.get("date_from"),
            "date_to": obj.get("date_to"),
            "create_dt": obj.get("create_dt"),
            "currency_name": obj.get("currency_name"),
            "suppliercontract_code": obj.get("suppliercontract_code"),
            "rrd_id": obj.get("rrd_id"),
            "gi_id": obj.get("gi_id"),
            "subject_name": obj.get("subject_name"),
            "nm_id": obj.get("nm_id"),
            "brand_name": obj.get("brand_name"),
            "sa_name": obj.get("sa_name"),
            "ts_name": obj.get("ts_name"),
            "barcode": obj.get("barcode"),
            "doc_type_name": obj.get("doc_type_name"),
            "quantity": obj.get("quantity"),
            "retail_price": obj.get("retail_price"),
            "retail_amount": obj.get("retail_amount"),
            "sale_percent": obj.get("sale_percent"),
            "commission_percent": obj.get("commission_percent"),
            "office_name": obj.get("office_name"),
            "supplier_oper_name": obj.get("supplier_oper_name"),
            "order_dt": obj.get("order_dt"),
            "sale_dt": obj.get("sale_dt"),
            "rr_dt": obj.get("rr_dt"),
            "shk_id": obj.get("shk_id"),
            "retail_price_withdisc_rub": obj.get("retail_price_withdisc_rub"),
            "delivery_amount": obj.get("delivery_amount"),
            "return_amount": obj.get("return_amount"),
            "delivery_rub": obj.get("delivery_rub"),
            "gi_box_type_name": obj.get("gi_box_type_name"),
            "product_discount_for_report": obj.get("product_discount_for_report"),
            "supplier_promo": obj.get("supplier_promo"),
            "rid": obj.get("rid"),
            "ppvz_spp_prc": obj.get("ppvz_spp_prc"),
            "ppvz_kvw_prc_base": obj.get("ppvz_kvw_prc_base"),
            "ppvz_kvw_prc": obj.get("ppvz_kvw_prc"),
            "sup_rating_prc_up": obj.get("sup_rating_prc_up"),
            "is_kgvp_v2": obj.get("is_kgvp_v2"),
            "ppvz_sales_commission": obj.get("ppvz_sales_commission"),
            "ppvz_for_pay": obj.get("ppvz_for_pay"),
            "ppvz_reward": obj.get("ppvz_reward"),
            "acquiring_fee": obj.get("acquiring_fee"),
            "acquiring_bank": obj.get("acquiring_bank"),
            "ppvz_vw": obj.get("ppvz_vw"),
            "ppvz_vw_nds": obj.get("ppvz_vw_nds"),
            "ppvz_office_id": obj.get("ppvz_office_id"),
            "ppvz_office_name": obj.get("ppvz_office_name"),
            "ppvz_supplier_id": obj.get("ppvz_supplier_id"),
            "ppvz_supplier_name": obj.get("ppvz_supplier_name"),
            "ppvz_inn": obj.get("ppvz_inn"),
            "declaration_number": obj.get("declaration_number"),
            "bonus_type_name": obj.get("bonus_type_name"),
            "sticker_id": obj.get("sticker_id"),
            "site_country": obj.get("site_country"),
            "penalty": obj.get("penalty"),
            "additional_payment": obj.get("additional_payment"),
            "rebill_logistic_cost": obj.get("rebill_logistic_cost"),
            "rebill_logistic_org": obj.get("rebill_logistic_org"),
            "kiz": obj.get("kiz"),
            "storage_fee": obj.get("storage_fee"),
            "deduction": obj.get("deduction"),
            "acceptance": obj.get("acceptance"),
            "srid": obj.get("srid"),
            "report_type": obj.get("report_type")
        })
        return _obj


