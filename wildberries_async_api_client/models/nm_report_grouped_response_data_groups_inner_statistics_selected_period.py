# coding: utf-8

"""
    Wildberries API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from wildberries_async_api_client.models.nm_report_detail_response_data_cards_inner_statistics_selected_period_conversions import NmReportDetailResponseDataCardsInnerStatisticsSelectedPeriodConversions
from typing import Optional, Set
from typing_extensions import Self

class NmReportGroupedResponseDataGroupsInnerStatisticsSelectedPeriod(BaseModel):
    """
    Запрашиваемый период
    """ # noqa: E501
    begin: Optional[StrictStr] = Field(default=None, description="Начало периода")
    end: Optional[StrictStr] = Field(default=None, description="Конец периода")
    open_card_count: Optional[StrictInt] = Field(default=None, description="Количество переходов в КТ", alias="openCardCount")
    add_to_cart_count: Optional[StrictInt] = Field(default=None, description="Положили в корзину, штук", alias="addToCartCount")
    orders_count: Optional[StrictInt] = Field(default=None, description="Заказали товаров, штук", alias="ordersCount")
    orders_sum_rub: Optional[StrictInt] = Field(default=None, description="Заказали на сумму, руб.", alias="ordersSumRub")
    buyouts_count: Optional[StrictInt] = Field(default=None, description="Выкупили товаров, штук", alias="buyoutsCount")
    buyouts_sum_rub: Optional[StrictInt] = Field(default=None, description="Выкупили на сумму, руб.", alias="buyoutsSumRub")
    cancel_count: Optional[StrictInt] = Field(default=None, description="Отменили товаров, штук", alias="cancelCount")
    cancel_sum_rub: Optional[StrictInt] = Field(default=None, description="Отменили на сумму, руб", alias="cancelSumRub")
    avg_price_rub: Optional[StrictInt] = Field(default=None, description="Средняя цена, руб.", alias="avgPriceRub")
    avg_orders_count_per_day: Optional[StrictInt] = Field(default=None, description="Среднее количество заказов в день, шт.", alias="avgOrdersCountPerDay")
    conversions: Optional[NmReportDetailResponseDataCardsInnerStatisticsSelectedPeriodConversions] = None
    __properties: ClassVar[List[str]] = ["begin", "end", "openCardCount", "addToCartCount", "ordersCount", "ordersSumRub", "buyoutsCount", "buyoutsSumRub", "cancelCount", "cancelSumRub", "avgPriceRub", "avgOrdersCountPerDay", "conversions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NmReportGroupedResponseDataGroupsInnerStatisticsSelectedPeriod from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of conversions
        if self.conversions:
            _dict['conversions'] = self.conversions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NmReportGroupedResponseDataGroupsInnerStatisticsSelectedPeriod from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "begin": obj.get("begin"),
            "end": obj.get("end"),
            "openCardCount": obj.get("openCardCount"),
            "addToCartCount": obj.get("addToCartCount"),
            "ordersCount": obj.get("ordersCount"),
            "ordersSumRub": obj.get("ordersSumRub"),
            "buyoutsCount": obj.get("buyoutsCount"),
            "buyoutsSumRub": obj.get("buyoutsSumRub"),
            "cancelCount": obj.get("cancelCount"),
            "cancelSumRub": obj.get("cancelSumRub"),
            "avgPriceRub": obj.get("avgPriceRub"),
            "avgOrdersCountPerDay": obj.get("avgOrdersCountPerDay"),
            "conversions": NmReportDetailResponseDataCardsInnerStatisticsSelectedPeriodConversions.from_dict(obj["conversions"]) if obj.get("conversions") is not None else None
        })
        return _obj


