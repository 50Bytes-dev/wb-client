# coding: utf-8

"""
    Wildberries API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from wildberries_async_api_client.models.api_v1_feedback_get200_response_data_photo_links_inner import ApiV1FeedbackGet200ResponseDataPhotoLinksInner
from wildberries_async_api_client.models.api_v1_feedback_get200_response_data_product_details import ApiV1FeedbackGet200ResponseDataProductDetails
from wildberries_async_api_client.models.api_v1_feedback_get200_response_data_video import ApiV1FeedbackGet200ResponseDataVideo
from wildberries_async_api_client.models.response_feedback_inner_answer import ResponseFeedbackInnerAnswer
from typing import Optional, Set
from typing_extensions import Self

class ResponseFeedbackInner(BaseModel):
    """
    ResponseFeedbackInner
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Id отзыва")
    user_name: Optional[StrictStr] = Field(default=None, description="Имя автора отзыва", alias="userName")
    matching_size: Optional[StrictStr] = Field(default=None, description="Соответствие заявленного размера реальному. <br>Возможные значения: - ` ` - для безразмерных товаров - `ок` - соответствует размеру - `smaller` - маломерит - `bigger` - большемерит         ", alias="matchingSize")
    text: Optional[StrictStr] = Field(default=None, description="Текст отзыва")
    product_valuation: Optional[StrictInt] = Field(default=None, description="Оценка товара от покупателя", alias="productValuation")
    created_date: Optional[datetime] = Field(default=None, description="Дата и время создания отзыва", alias="createdDate")
    state: Optional[StrictStr] = Field(default=None, description="Статус отзыва:   - `none` - не обработан (новый)   - `wbRu` - обработан ")
    answer: Optional[ResponseFeedbackInnerAnswer] = None
    product_details: Optional[ApiV1FeedbackGet200ResponseDataProductDetails] = Field(default=None, alias="productDetails")
    photo_links: Optional[List[ApiV1FeedbackGet200ResponseDataPhotoLinksInner]] = Field(default=None, description="Массив структур фотографий", alias="photoLinks")
    video: Optional[ApiV1FeedbackGet200ResponseDataVideo] = None
    was_viewed: Optional[StrictBool] = Field(default=None, description="Просмотрен ли отзыв", alias="wasViewed")
    is_able_supplier_feedback_valuation: Optional[StrictBool] = Field(default=None, description="Доступна ли продавцу оценка отзыва (`true` - доступна, `false` - не доступна)", alias="isAbleSupplierFeedbackValuation")
    supplier_feedback_valuation: Optional[StrictInt] = Field(default=None, description="Оценка отзыва, оставленная продавцом", alias="supplierFeedbackValuation")
    is_able_supplier_product_valuation: Optional[StrictBool] = Field(default=None, description="Доступна ли продавцу оценка товара (`true` - доступна, `false` - не доступна)", alias="isAbleSupplierProductValuation")
    supplier_product_valuation: Optional[StrictInt] = Field(default=None, description="Оценка товара, оставленная продавцом", alias="supplierProductValuation")
    is_able_return_product_orders: Optional[StrictBool] = Field(default=None, description="Доступна ли товару опция возврата (`false` - нет, `true` - да)", alias="isAbleReturnProductOrders")
    return_product_orders_date: Optional[StrictStr] = Field(default=None, description="Дата и время, когда на запрос возврата был получен ответ со статус-кодом 200.", alias="returnProductOrdersDate")
    bables: Optional[List[StrictStr]] = Field(default=None, description="Список тегов покупателя")
    __properties: ClassVar[List[str]] = ["id", "userName", "matchingSize", "text", "productValuation", "createdDate", "state", "answer", "productDetails", "photoLinks", "video", "wasViewed", "isAbleSupplierFeedbackValuation", "supplierFeedbackValuation", "isAbleSupplierProductValuation", "supplierProductValuation", "isAbleReturnProductOrders", "returnProductOrdersDate", "bables"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResponseFeedbackInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of answer
        if self.answer:
            _dict['answer'] = self.answer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product_details
        if self.product_details:
            _dict['productDetails'] = self.product_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in photo_links (list)
        _items = []
        if self.photo_links:
            for _item in self.photo_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['photoLinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of video
        if self.video:
            _dict['video'] = self.video.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResponseFeedbackInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "userName": obj.get("userName"),
            "matchingSize": obj.get("matchingSize"),
            "text": obj.get("text"),
            "productValuation": obj.get("productValuation"),
            "createdDate": obj.get("createdDate"),
            "state": obj.get("state"),
            "answer": ResponseFeedbackInnerAnswer.from_dict(obj["answer"]) if obj.get("answer") is not None else None,
            "productDetails": ApiV1FeedbackGet200ResponseDataProductDetails.from_dict(obj["productDetails"]) if obj.get("productDetails") is not None else None,
            "photoLinks": [ApiV1FeedbackGet200ResponseDataPhotoLinksInner.from_dict(_item) for _item in obj["photoLinks"]] if obj.get("photoLinks") is not None else None,
            "video": ApiV1FeedbackGet200ResponseDataVideo.from_dict(obj["video"]) if obj.get("video") is not None else None,
            "wasViewed": obj.get("wasViewed"),
            "isAbleSupplierFeedbackValuation": obj.get("isAbleSupplierFeedbackValuation"),
            "supplierFeedbackValuation": obj.get("supplierFeedbackValuation"),
            "isAbleSupplierProductValuation": obj.get("isAbleSupplierProductValuation"),
            "supplierProductValuation": obj.get("supplierProductValuation"),
            "isAbleReturnProductOrders": obj.get("isAbleReturnProductOrders"),
            "returnProductOrdersDate": obj.get("returnProductOrdersDate"),
            "bables": obj.get("bables")
        })
        return _obj


