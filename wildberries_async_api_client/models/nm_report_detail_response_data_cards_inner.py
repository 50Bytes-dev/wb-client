# coding: utf-8

"""
    Wildberries API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from wildberries_async_api_client.models.nm_report_detail_response_data_cards_inner_object import NmReportDetailResponseDataCardsInnerObject
from wildberries_async_api_client.models.nm_report_detail_response_data_cards_inner_statistics import NmReportDetailResponseDataCardsInnerStatistics
from wildberries_async_api_client.models.nm_report_detail_response_data_cards_inner_stocks import NmReportDetailResponseDataCardsInnerStocks
from wildberries_async_api_client.models.nm_report_detail_response_data_cards_inner_tags_inner import NmReportDetailResponseDataCardsInnerTagsInner
from typing import Optional, Set
from typing_extensions import Self

class NmReportDetailResponseDataCardsInner(BaseModel):
    """
    NmReportDetailResponseDataCardsInner
    """ # noqa: E501
    nm_id: Optional[StrictInt] = Field(default=None, description="Артикул WB", alias="nmID")
    vendor_code: Optional[StrictStr] = Field(default=None, description="Артикул продавца", alias="vendorCode")
    brand_name: Optional[StrictStr] = Field(default=None, description="Название бренд", alias="brandName")
    tags: Optional[List[NmReportDetailResponseDataCardsInnerTagsInner]] = Field(default=None, description="Теги")
    object: Optional[NmReportDetailResponseDataCardsInnerObject] = None
    statistics: Optional[NmReportDetailResponseDataCardsInnerStatistics] = None
    stocks: Optional[NmReportDetailResponseDataCardsInnerStocks] = None
    __properties: ClassVar[List[str]] = ["nmID", "vendorCode", "brandName", "tags", "object", "statistics", "stocks"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NmReportDetailResponseDataCardsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item in self.tags:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of object
        if self.object:
            _dict['object'] = self.object.to_dict()
        # override the default output from pydantic by calling `to_dict()` of statistics
        if self.statistics:
            _dict['statistics'] = self.statistics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stocks
        if self.stocks:
            _dict['stocks'] = self.stocks.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NmReportDetailResponseDataCardsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "nmID": obj.get("nmID"),
            "vendorCode": obj.get("vendorCode"),
            "brandName": obj.get("brandName"),
            "tags": [NmReportDetailResponseDataCardsInnerTagsInner.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "object": NmReportDetailResponseDataCardsInnerObject.from_dict(obj["object"]) if obj.get("object") is not None else None,
            "statistics": NmReportDetailResponseDataCardsInnerStatistics.from_dict(obj["statistics"]) if obj.get("statistics") is not None else None,
            "stocks": NmReportDetailResponseDataCardsInnerStocks.from_dict(obj["stocks"]) if obj.get("stocks") is not None else None
        })
        return _obj


