# coding: utf-8

"""
    Wildberries API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ApiV1AnalyticsStorageCoefficientGet200ResponseReportInner(BaseModel):
    """
    ApiV1AnalyticsStorageCoefficientGet200ResponseReportInner
    """ # noqa: E501
    actual_height: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Фактическая высота, см", alias="actualHeight")
    actual_length: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Фактическая длина, см", alias="actualLength")
    actual_volume: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Фактический объём, л", alias="actualVolume")
    actual_width: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Фактическая ширина, см", alias="actualWidth")
    var_date: Optional[StrictStr] = Field(default=None, description="Дата измерения в формате RFC 3339. Для расчёта используются измерения за 30 дней, до начала отчётной недели", alias="date")
    dimension_difference: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Разница в габаритах, %", alias="dimensionDifference")
    height: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Высота из карточки, см")
    length: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Длина из карточки, см")
    log_warehouse_coef: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Коэффициент логистики и хранения для товара", alias="logWarehouseCoef")
    nm_id: Optional[StrictInt] = Field(default=None, description="Артикул Wildberries", alias="nmID")
    photo_urls: Optional[StrictStr] = Field(default=None, description="Фото измерений", alias="photoUrls")
    title: Optional[StrictStr] = Field(default=None, description="Наименование товара")
    volume: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Объём из карточки, л")
    width: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Ширина из карточки, см")
    __properties: ClassVar[List[str]] = ["actualHeight", "actualLength", "actualVolume", "actualWidth", "date", "dimensionDifference", "height", "length", "logWarehouseCoef", "nmID", "photoUrls", "title", "volume", "width"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiV1AnalyticsStorageCoefficientGet200ResponseReportInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiV1AnalyticsStorageCoefficientGet200ResponseReportInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actualHeight": obj.get("actualHeight"),
            "actualLength": obj.get("actualLength"),
            "actualVolume": obj.get("actualVolume"),
            "actualWidth": obj.get("actualWidth"),
            "date": obj.get("date"),
            "dimensionDifference": obj.get("dimensionDifference"),
            "height": obj.get("height"),
            "length": obj.get("length"),
            "logWarehouseCoef": obj.get("logWarehouseCoef"),
            "nmID": obj.get("nmID"),
            "photoUrls": obj.get("photoUrls"),
            "title": obj.get("title"),
            "volume": obj.get("volume"),
            "width": obj.get("width")
        })
        return _obj


