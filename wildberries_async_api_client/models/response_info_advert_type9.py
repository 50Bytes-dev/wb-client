# coding: utf-8

"""
    Wildberries API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from wildberries_async_api_client.models.response_info_advert_type9_united_params_inner import ResponseInfoAdvertType9UnitedParamsInner
from typing import Optional, Set
from typing_extensions import Self

class ResponseInfoAdvertType9(BaseModel):
    """
    ResponseInfoAdvertType9
    """ # noqa: E501
    advert_id: Optional[StrictInt] = Field(default=None, description="Идентификатор кампании", alias="advertId")
    name: Optional[StrictStr] = Field(default=None, description="Название кампании")
    type: Optional[StrictInt] = Field(default=None, description="<dl> <dt>Тип кампании:</dt> <dd><code>9</code> - поиск + каталог </dd> </dl> ")
    status: Optional[StrictInt] = Field(default=None, description="<dl> <dt>Статус кампании:</dt> <dd><code>-1</code> - кампания в процессе удаления </dd> <dd><code>4</code> - готова к запуску </dd> <dd><code>7</code> - Кампания завершена</dd> <dd><code>8</code> - отказался</dd> <dd><code>9</code> - идут показы</dd> <dd><code>11</code> - Кампания на паузе</dd> </dl> Кампания в процессе удаления. Статус означает, что кампания была удалена, и через 3-10 минут она исчезнет из ответа метода. ")
    daily_budget: Optional[StrictInt] = Field(default=None, description="Не используется", alias="dailyBudget")
    create_time: Optional[datetime] = Field(default=None, description="Дата создания кампании", alias="createTime")
    change_time: Optional[datetime] = Field(default=None, description="Дата последнего изменения кампании", alias="changeTime")
    start_time: Optional[datetime] = Field(default=None, description="Дата последнего запуска кампании", alias="startTime")
    end_time: Optional[datetime] = Field(default=None, description="Дата завершения кампании", alias="endTime")
    united_params: Optional[List[ResponseInfoAdvertType9UnitedParamsInner]] = Field(default=None, alias="unitedParams")
    __properties: ClassVar[List[str]] = ["advertId", "name", "type", "status", "dailyBudget", "createTime", "changeTime", "startTime", "endTime", "unitedParams"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResponseInfoAdvertType9 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in united_params (list)
        _items = []
        if self.united_params:
            for _item in self.united_params:
                if _item:
                    _items.append(_item.to_dict())
            _dict['unitedParams'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResponseInfoAdvertType9 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "advertId": obj.get("advertId"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "status": obj.get("status"),
            "dailyBudget": obj.get("dailyBudget"),
            "createTime": obj.get("createTime"),
            "changeTime": obj.get("changeTime"),
            "startTime": obj.get("startTime"),
            "endTime": obj.get("endTime"),
            "unitedParams": [ResponseInfoAdvertType9UnitedParamsInner.from_dict(_item) for _item in obj["unitedParams"]] if obj.get("unitedParams") is not None else None
        })
        return _obj


