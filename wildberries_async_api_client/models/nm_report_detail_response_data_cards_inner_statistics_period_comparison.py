# coding: utf-8

"""
    Wildberries API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from wildberries_async_api_client.models.nm_report_detail_response_data_cards_inner_statistics_period_comparison_conversions import NmReportDetailResponseDataCardsInnerStatisticsPeriodComparisonConversions
from typing import Optional, Set
from typing_extensions import Self

class NmReportDetailResponseDataCardsInnerStatisticsPeriodComparison(BaseModel):
    """
    Сравнение двух периодов, в процентах
    """ # noqa: E501
    open_card_dynamics: Optional[StrictInt] = Field(default=None, description="Динамика переходов в карточку товара", alias="openCardDynamics")
    add_to_cart_dynamics: Optional[StrictInt] = Field(default=None, description="Динамика добавлений в корзину", alias="addToCartDynamics")
    orders_count_dynamics: Optional[StrictInt] = Field(default=None, description="Динамика количества заказов", alias="ordersCountDynamics")
    orders_sum_rub_dynamics: Optional[StrictInt] = Field(default=None, description="Динамика суммы заказов, рублей", alias="ordersSumRubDynamics")
    buyouts_count_dynamics: Optional[StrictInt] = Field(default=None, description="Динамика выкупов, штук", alias="buyoutsCountDynamics")
    buyouts_sum_rub_dynamics: Optional[StrictInt] = Field(default=None, description="Динамика суммы выкупов, рублей", alias="buyoutsSumRubDynamics")
    cancel_count_dynamics: Optional[StrictInt] = Field(default=None, description="Динамика отмен товаров, штук", alias="cancelCountDynamics")
    cancel_sum_rub_dynamics: Optional[StrictInt] = Field(default=None, description="Динамика сумм отмен товаров, рублей", alias="cancelSumRubDynamics")
    avg_orders_count_per_day_dynamics: Optional[StrictInt] = Field(default=None, description="Динамика среднего количества заказов в день", alias="avgOrdersCountPerDayDynamics")
    avg_price_rub_dynamics: Optional[StrictInt] = Field(default=None, description="Динамика средней цены на товары. Учитываются скидки для акций и WB скидка.", alias="avgPriceRubDynamics")
    conversions: Optional[NmReportDetailResponseDataCardsInnerStatisticsPeriodComparisonConversions] = None
    __properties: ClassVar[List[str]] = ["openCardDynamics", "addToCartDynamics", "ordersCountDynamics", "ordersSumRubDynamics", "buyoutsCountDynamics", "buyoutsSumRubDynamics", "cancelCountDynamics", "cancelSumRubDynamics", "avgOrdersCountPerDayDynamics", "avgPriceRubDynamics", "conversions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NmReportDetailResponseDataCardsInnerStatisticsPeriodComparison from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of conversions
        if self.conversions:
            _dict['conversions'] = self.conversions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NmReportDetailResponseDataCardsInnerStatisticsPeriodComparison from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "openCardDynamics": obj.get("openCardDynamics"),
            "addToCartDynamics": obj.get("addToCartDynamics"),
            "ordersCountDynamics": obj.get("ordersCountDynamics"),
            "ordersSumRubDynamics": obj.get("ordersSumRubDynamics"),
            "buyoutsCountDynamics": obj.get("buyoutsCountDynamics"),
            "buyoutsSumRubDynamics": obj.get("buyoutsSumRubDynamics"),
            "cancelCountDynamics": obj.get("cancelCountDynamics"),
            "cancelSumRubDynamics": obj.get("cancelSumRubDynamics"),
            "avgOrdersCountPerDayDynamics": obj.get("avgOrdersCountPerDayDynamics"),
            "avgPriceRubDynamics": obj.get("avgPriceRubDynamics"),
            "conversions": NmReportDetailResponseDataCardsInnerStatisticsPeriodComparisonConversions.from_dict(obj["conversions"]) if obj.get("conversions") is not None else None
        })
        return _obj


