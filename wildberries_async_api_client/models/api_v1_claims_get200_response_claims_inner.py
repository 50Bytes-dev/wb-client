# coding: utf-8

"""
    Wildberries API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ApiV1ClaimsGet200ResponseClaimsInner(BaseModel):
    """
    ApiV1ClaimsGet200ResponseClaimsInner
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="ID заявки")
    claim_type: Optional[StrictInt] = Field(default=None, description="Источник заявки:   * `1` — портал покупателей   * `3` — чат ")
    status: Optional[StrictInt] = Field(default=None, description="Решение по возврату покупателю:   * `0` — на рассмотрении   * `1` — отказ   * `2` — одобрено ")
    status_ex: Optional[StrictInt] = Field(default=None, description="Статус товара:   * `0` — на рассмотрении   * `1` — остаётся у покупателя   * `2` — без возврата                             * `5` — без возврата   * `8` — товар будет возвращён в реализацию или оформлен на возврат после проверки WB   * `10` — возврат продавцу ")
    nm_id: Optional[StrictInt] = Field(default=None, description="Артикул WB")
    user_comment: Optional[Annotated[str, Field(strict=True, max_length=1000)]] = Field(default=None, description="Комментарий покупателя")
    wb_comment: Optional[Annotated[str, Field(strict=True, max_length=10000)]] = Field(default=None, description="Ответ покупателю")
    dt: Optional[datetime] = Field(default=None, description="Дата и время оформления заявки покупателем")
    imt_name: Optional[StrictStr] = Field(default=None, description="Название товара")
    order_dt: Optional[datetime] = Field(default=None, description="Дата и время заказа")
    dt_update: Optional[datetime] = Field(default=None, description="Дата и время рассмотрения заявки. Для нерассмотренной заявки — дата и время оформления")
    photos: Optional[Annotated[List[StrictStr], Field(min_length=0, max_length=10)]] = Field(default=None, description="Фотографии из заявки покупателя")
    video_paths: Optional[Annotated[List[StrictStr], Field(min_length=0, max_length=1)]] = Field(default=None, description="Видео из заявки покупателя")
    actions: Optional[List[StrictStr]] = Field(default=None, description="Варианты ответа продавца.<br> Отклонённые заявки можно пересмотреть. Если массив пуст, с заявкой работать нельзя.   * `approve1` — одобрить с проверкой брака.<br>Деньги вернутся покупателю после возврата товара. Товар будет проверен на складе. При подтверждении брака/ошибки вложения товар будет отправлен продавцу. Если брак/ошибка вложения не подтвердятся, товар будет возвращён в продажу.   * `approve2` — одобрить и забрать товар.<br> Деньги вернутся покупателю после возврата товара. Товар будет отправлен продавцу.   * `autorefund1` — одобрить без возврата товара.<br> Товар останется у покупателя. Деньги за него будут возвращены покупателю без возврата товара.   * `reject1` — отклонить с шаблоном ответа: <details><summary><strong>Брак не обнаружен</strong></summary>Здравствуйте! Заявка онлайн на проверку качества товара рассмотрена.<br>По предоставленной информации (фото, видео, комментарий) брак не подтвержден.</details>   * `reject2` — отклонить с шаблоном ответа: <details><summary><strong>Добавить фото/видео</strong></summary>Добрый день! Заявка онлайн на проверку качества товара рассмотрена и отклонена по причине некорректного оформления. Обращаем Ваше внимание, что в комментариях должна быть представлена информация (описание) о наличии предполагаемого производственного брака, а фотографии (не менее двух) и (или) видео - отображать следующую информацию:<br>1. Обзорное изображение товара целиком<br>2. Крупный план вшивной бирки (или другая маркировка товара)<br>3. При наличии упаковки со штрих-кодом - фото ШК.<br>4. Предполагаемый дефект товара.<br>Просим Вас переоформить заявку с соблюдением необходимых условий.</details>   * `reject3` — отклонить с шаблоном ответа: <details><summary><strong>Направить в сервисный центр</strong></summary>Здравствуйте! Мы внимательно прочитали заявку, проверили фото и видео. К сожалению, мы не нашли брак, повреждение или несоответствие описанию в вашем товаре. Обратитесь напрямую в сервисный центр — его адрес и контакты есть на сайте производителя или на гарантийном талоне. Там проведут окончательную проверку товара и выдадут вам акт. Если центр нашёл брак, то отправьте этот акт в чат на нашем сайте.</details> ")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Фактическая цена с учетом всех скидок. Взимается с покупателя")
    currency_code: Optional[StrictStr] = Field(default=None, description="Код валюты цены")
    __properties: ClassVar[List[str]] = ["id", "claim_type", "status", "status_ex", "nm_id", "user_comment", "wb_comment", "dt", "imt_name", "order_dt", "dt_update", "photos", "video_paths", "actions", "price", "currency_code"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiV1ClaimsGet200ResponseClaimsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiV1ClaimsGet200ResponseClaimsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "claim_type": obj.get("claim_type"),
            "status": obj.get("status"),
            "status_ex": obj.get("status_ex"),
            "nm_id": obj.get("nm_id"),
            "user_comment": obj.get("user_comment"),
            "wb_comment": obj.get("wb_comment"),
            "dt": obj.get("dt"),
            "imt_name": obj.get("imt_name"),
            "order_dt": obj.get("order_dt"),
            "dt_update": obj.get("dt_update"),
            "photos": obj.get("photos"),
            "video_paths": obj.get("video_paths"),
            "actions": obj.get("actions"),
            "price": obj.get("price"),
            "currency_code": obj.get("currency_code")
        })
        return _obj


