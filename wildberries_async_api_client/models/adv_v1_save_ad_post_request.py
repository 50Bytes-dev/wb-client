# coding: utf-8

"""
    Wildberries API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AdvV1SaveAdPostRequest(BaseModel):
    """
    AdvV1SaveAdPostRequest
    """ # noqa: E501
    type: Optional[StrictInt] = Field(default=None, description="<dl> <dt>Тип автоматической кампании:</dt> <dd><code>8</code> </dl> ")
    name: Optional[StrictStr] = Field(default=None, description="Название кампании (max. 128 символов)")
    subject_id: Optional[StrictInt] = Field(default=None, description="ID предмета, для которого создается кампания.<br> Существующие у продавца идентификаторы можно получить методом из раздела \"Контент / Просмотр\" - \"Список НМ\", поле ответа - `objectID`. ", alias="subjectId")
    sum: Optional[StrictInt] = Field(default=None, description="Сумма пополнения")
    btype: Optional[StrictInt] = Field(default=None, description="<dl> <dt>Tип списания.</dt> <dd><code>0</code> - Счёт</dd> <dd><code>1</code> - Баланс</dd> <dd><code>3</code> - Бонусы</dd> </dl> ")
    on_pause: Optional[StrictBool] = Field(default=None, description="<dl> <dt>После создания кампания:</dt>  <dd>   <dl>     <dt><code>true</code> - будет на паузе.</dt>     <dd>Запуск кампании будет доступен через 3 минуты после создания кампании.</dd>   </dl> </dd>  <dd><code>false</code> - будет сразу запущена</dd>  </dl> ")
    nms: Optional[List[StrictInt]] = Field(default=None, description="Массив артикулов WB. <br> Максимум 100 артикулов.  ")
    cpm: Optional[StrictInt] = Field(default=None, description="Ставка. <br> Если будет указана ставка меньше допустимого размера, то автоматически установится ставка минимально допустимого размера. ")
    __properties: ClassVar[List[str]] = ["type", "name", "subjectId", "sum", "btype", "on_pause", "nms", "cpm"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdvV1SaveAdPostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdvV1SaveAdPostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "name": obj.get("name"),
            "subjectId": obj.get("subjectId"),
            "sum": obj.get("sum"),
            "btype": obj.get("btype"),
            "on_pause": obj.get("on_pause"),
            "nms": obj.get("nms"),
            "cpm": obj.get("cpm")
        })
        return _obj


